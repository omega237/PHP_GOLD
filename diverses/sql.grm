"Name"    = 'SQL 89'
"Version" = '1989'
"About"   = 'This is the ANSI 89 version of SQL. Variations are used by Oracle, Microsoft and most other database developers'

"Start Symbol" = <Query>

{String Ch 1} = {Printable} - ["]
{String Ch 2} = {Printable} - ['']
{Id Ch Standard} = {Alphanumeric} + [_]
{Id Ch Extended} = {Printable} - ['['] - [']']

Comment Start = '/*'
Comment End = '*/'
Comment Line = '--'

StringLiteral = '"'{String Ch 1}*'"' | ''{String Ch 2}*''
IntegerLiteral = {Digit}+
RealLiteral = {Digit}+'.'{Digit}+

!----- Identifiers in SQL are very complex. 

Id = ({Letter}{Id Ch Standard}* | '['{Id Ch Extended}+']') ('.'({Letter}{Id Ch Standard}* | '['{Id Ch Extended}+']'))?

<Query> ::= <Alter Stm>
          | <Create Stm>
          | <Delete Stm>
          | <Drop Stm>
          | <Insert Stm>
          | <Select Stm>
          | <Update Stm>

<Alter Stm> ::= ALTER TABLE Id ADD COLUMN <Field Def> <Constraint Opt>
              | ALTER TABLE Id ADD <Constraint>
              | ALTER TABLE Id DROP COLUMN Id
              | ALTER TABLE Id DROP CONSTRAINT Id


<Create Stm> ::= CREATE <Unique> INDEX IntegerLiteral ON Id '(' <Order List> ')' <With Clause>
               | CREATE TABLE Id '(' <ID List> ')' <Constraint Opt>

<Unique> ::= UNIQUE
           |

<With Clause> ::= WITH PRIMARY
                | WITH DISALLOW NULL
                | WITH IGNORE NULL
                |

<Field Def> ::= Id <Type> NOT NULL
              | Id <Type>

<Field Def List> ::= <Field Def> ',' <Field Def List>
                   | <Field Def>

<Type> ::= BIT
         | DATE
         | TIME
         | TIMESTAMP
         | DECIMAL
         | REAL
         | FLOAT
         | SMALLINT
         | INTEGER
         | INTERVAL
         | CHARACTER 


<Constraint Opt> ::= <Constraint>
                   |

<Constraint> ::= CONSTRAINT Id <Constraint Type>
               | CONSTRAINT Id

<Constraint Type> ::= PRIMARY KEY '(' <Id List> ')'
                    | UNIQUE '(' <Id List> ')'
                    | NOT NULL '(' <Id List> ')'
                    | FOREIGN KEY '(' <Id List> ')' REFERENCES Id '(' <Id List> ')'

<Drop Stm> ::= DROP TABLE Id
             | DROP INDEX Id ON Id

<Insert Stm> ::= INSERT INTO Id '(' <Id List> ')' <Select Stm>
               | INSERT INTO Id '(' <Id List> ')' VALUES '(' <Expr List> ')'


<Update Stm> ::= UPDATE Id SET <Assign List> <Where Clause>

<Assign List> ::= Id '=' <Expression> ',' <Assign List>
                | Id '=' <Expression> 

<Delete Stm> ::= DELETE FROM Id <Where Clause>

<Select Stm> ::= SELECT <Columns> <Into Clause> <From Clause> <Where Clause> <Group Clause> <Having Clause> <Order Clause>

<Columns> ::= <Restriction> '*'
            | <Restriction> <Column List>

<Column List> ::= <Column Source> ',' <Column List>
                | <Column Source>

<Column Source> ::= <Aggregate> 
                  | Id

<Restriction> ::= ALL
                | DISTINCT
                |

<Aggregate> ::= Count '(' '*' ')' 
              | Count '(' <Expression> ')'
              | Avg '(' <Expression> ')'
              | Min '(' <Expression> ')'
              | Max '(' <Expression> ')'
              | StDev '(' <Expression> ')'
              | StDevP '(' <Expression> ')'
              | Sum '(' <Expression> ')'
              | Var '(' <Expression> ')'
              | VarP '(' <Expression> ')'

<Into Clause> ::= INTO Id
                |

<From Clause> ::= FROM <Id List> <Join Chain>

<Join Chain> ::= <Join> <Join Chain>
               |

<Join> ::= INNER JOIN <Id List> ON Id '=' Id
         | LEFT JOIN <Id List> ON Id '=' Id
         | RIGHT JOIN <Id List> ON Id '=' Id
         | JOIN <Id List> ON Id '=' Id


<Where Clause> ::= WHERE <Expression>
                 |

<Group Clause> ::= GROUP BY <Id List>
                 |

<Order Clause> ::= ORDER BY <Order List>
                 |

<Order List> ::= ID <Order Type> ',' <Order List>
               | ID <Order Type>

<Order Type> ::= ASC
               | DESC
               |

<Having Clause> ::= HAVING <Expression>
                  |

!------------------------------------------------------------ Expressions

<Expression> ::= <And Exp> OR <Expression>
               | <And Exp>

<And Exp> ::= <Not Exp> AND <And Exp>
            | <Not Exp>

<Not Exp> ::= NOT <Pred Exp>
            | <Pred Exp>

<Pred Exp> ::= <Add Exp> BETWEEN <Add Exp> AND <Add Exp>
             | <Add Exp> NOT BETWEEN <Add Exp> AND <Add Exp>
             | <Value> IS NOT NULL
             | <Value> IS NULL
             | <Add Exp> LIKE StringLiteral
             | <Add Exp> IN <Tuple>
             | <Add Exp> '=' <Add Exp>
             | <Add Exp> '<>' <Add Exp>
             | <Add Exp> '!=' <Add Exp>
             | <Add Exp> '>' <Add Exp>
             | <Add Exp> '>=' <Add Exp>
             | <Add Exp> '<' <Add Exp>
             | <Add Exp> '<=' <Add Exp>
             | <Add Exp>

<Add Exp> ::= <Mult Exp> '+' <Add Exp>
            | <Mult Exp> '-' <Add Exp>
            | <Mult Exp>

<Mult Exp> ::= <Negate Exp> '*' <Mult Exp>
             | <Negate Exp> '/' <Mult Exp>
             | <Negate Exp>

<Negate Exp> ::= '-' <Value>
               | <Value>

<Value> ::= <Tuple>
          | ID
          | IntegerLiteral
          | RealLiteral
          | StringLiteral

<Tuple> ::= '(' <Select Stm> ')'
          | '(' <Expr List> ')'

<Expr List> ::= <Expression> ',' <Expr List>
              | <Expression>

<Id List> ::= Id ',' <Id List> 
            | Id
